import asyncio
import os
import sys
from logging.config import fileConfig

from sqlalchemy import pool
from sqlalchemy.ext.asyncio import create_async_engine  # Use async engine
from sqlalchemy.sql import schema  # Import schema for naming convention

from alembic import context

# --- Add project root to sys.path ---
# This allows Alembic to find your src module
# Adjust the path depth ("..") if your migrations directory is nested differently
project_dir = os.path.realpath(os.path.join(os.path.dirname(__file__), "..", "src"))
if project_dir not in sys.path:
    sys.path.insert(0, project_dir)
# ------------------------------------

# --- Import application settings and models ---
# Now you can import from your src directory
from config.settings import settings  # Your Pydantic settings
from db.models import Base  # Your SQLAlchemy Base class containing all models

# Ensure pgvector types are recognized by SQLAlchemy's reflection
# This import is usually sufficient if Base imports models that use Vector
# If autogenerate misses vector columns, you might need a direct import here:
# from pgvector.sqlalchemy import Vector
# ---------------------------------------------

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
target_metadata = Base.metadata

# --- Configure naming convention for autogenerated constraints ---
# Optional but recommended: Use the same convention as in your models.py
# If you defined 'metadata = MetaData(naming_convention=convention)' in models.py
# you can reuse it here. Otherwise, define it explicitly.
naming_convention = {
    "ix": "ix_%(column_0_label)s",
    "uq": "uq_%(table_name)s_%(column_0_name)s",
    "ck": "ck_%(table_name)s_%(constraint_name)s",
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
    "pk": "pk_%(table_name)s",
}
# Apply the naming convention to the metadata used by Alembic
# This helps ensure autogenerated constraint names are consistent
if target_metadata.naming_convention != naming_convention:
    print("Applying naming convention from env.py to target_metadata")
    target_metadata.naming_convention = naming_convention
# ---------------------------------------------------------------

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def get_database_url():
    """Retrieves the database URL from application settings."""
    return settings.database.database_url_str  # Use the string URL from your settings


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = get_database_url()
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        # Add naming convention for offline mode too
        render_item=render_item_with_convention,
    )

    with context.begin_transaction():
        context.run_migrations()


def do_run_migrations(connection):
    """Helper function to run migrations within a context."""
    # Pass the naming convention to the context
    context.configure(
        connection=connection,
        target_metadata=target_metadata,
        # Add naming convention for online mode
        render_item=render_item_with_convention,
        # Consider include_schemas=True if using multiple schemas
    )

    with context.begin_transaction():
        context.run_migrations()


async def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    connectable = create_async_engine(
        get_database_url(),
        # Use NullPool for migrations, avoids hanging connections
        poolclass=pool.NullPool,
    )

    async with connectable.connect() as connection:
        # Run the migrations within an async transaction
        await connection.run_sync(do_run_migrations)

    # Dispose of the engine after running migrations
    await connectable.dispose()


# ---- Custom render item function to apply naming convention ----
# This ensures autogenerated indexes/constraints use your defined names
def render_item_with_convention(type_, obj, autogen_context):
    """Apply the naming convention"""

    if type_ == "schema" and isinstance(obj, schema.MetaData):
        # If the metadata object itself is being rendered (less common)
        # Ensure it has the convention attached
        obj.naming_convention = naming_convention
        return None  # Let Alembic handle default rendering for MetaData

    if type_ == "table" and isinstance(obj, schema.Table):
        # If rendering a Table, ensure its metadata has the convention
        if obj.metadata and obj.metadata.naming_convention != naming_convention:
            obj.metadata.naming_convention = naming_convention
        return False  # Let Alembic handle default table rendering

    # Apply convention logic primarily during comparison/generation phase
    # The context configuration is usually sufficient. Return False to use
    # default rendering.
    return False


# ---------------------------------------------------------------


# --- Main execution logic ---
if context.is_offline_mode():
    print("Running migrations in offline mode...")
    run_migrations_offline()
else:
    print("Running migrations in online mode...")
    # Use asyncio.run() to execute the async online migration function
    asyncio.run(run_migrations_online())
# --------------------------
